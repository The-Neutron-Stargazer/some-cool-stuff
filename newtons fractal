import numpy as np
import matplotlib.pyplot as plt

xlim, ylim= (-2,2), (-2,2)
max_iter = 50
tol = 1e-6
resolution = 500
def newton_fractal(f, f_prime, roots):
    realnum = np.linspace(xlim[0], xlim[1], resolution)
    imaginarynum = np.linspace(ylim[0], ylim[1], resolution)
    z = realnum[:, None] + 1j * imaginarynum

    iterations = np.zeros(z.shape)
    root_map = np.zeros(z.shape)

    for i in range(max_iter): # using the newton-raphson method here, hence the name newton's fractal
        Z_prev = z
        z = z - f(z) / f_prime(z)

        for idx, root in enumerate(roots):
            converged = np.abs(z - root) < tol
            root_map[converged] = idx + 1
            iterations[converged] = i
        if np.allclose(z, Z_prev, atol=tol):
            break

    plt.imshow(root_map, extent=(*xlim, *ylim), cmap="viridis", origin="lower")
    plt.colorbar(label="Root Convergence")
    plt.title("newton's fractal")
    plt.xlabel("real")
    plt.ylabel("imaginary")
    plt.show()

f = lambda z: z**3 - 1 # try with z^4 if you wanna see a weirder pattern
f_prime = lambda z: 3 * z**2
roots = [np.exp(2j * np.pi * k / 3) for k in range(3)]

newton_fractal(f, f_prime, roots)

""" disclaimer: i am a learner, so i used a lil chat gpt to guide me. 
feel free to bash me if i made any mistakes"""
